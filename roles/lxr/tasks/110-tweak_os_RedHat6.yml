--- # file: roles/lxr/tasks/110-tweak_os_RedHat6.yml

# Tweak OS settings for Lxr

# Assumed remote_user: root

# ---- SELinux settings ----

- name: setup,os_settings | check if selinux is installed
  stat: path=/etc/selinux/config
  register: selinux_config

- name: setup,os_settings | ensure the system has libselinux-python
  yum: name=libselinux-python state=present
  when: selinux_config.stat.exists

- name: setup,os_settings | disable selinux in the config file
  selinux: state=disabled
  when: selinux_config.stat.exists

- name: setup,os_settings | check if a reboot is required
  command: getenforce
  register: selinux_state
  changed_when: False
  when: selinux_config.stat.exists

- name: setup,os_settings | bailing out for a reboot
  fail: msg="Reboot the system and rerun the playbook after that."
  when: selinux_config.stat.exists and selinux_state.stdout != "Disabled"


# ---- Firewall settings ----

- name: setup,os_settings | check if firewall is running
  command: service iptables status
  register: firewall
  ignore_errors: yes
  changed_when: False

- name: setup,os_settings | check the current status of iptables
  shell: (iptables -L -n;iptables -L) | grep -q '^ACCEPT.*dpt:{{ httpd_port }}'
  register: iptables_state
  ignore_errors: True
  changed_when: False
  when: firewall.stdout | search("INPUT")

- name: setup,os_settings | dump iptables to /etc/sysconfig/iptabes
  command: creates=/etc/sysconfig/iptables
    /etc/rc.d/init.d/iptables save
  when: firewall.stdout | search("INPUT")

- name: setup,os_settings | open httpd port when firewall is running
  lineinfile:
    dest=/etc/sysconfig/iptables
    regexp="^-A INPUT.*--dport {{ httpd_port }}"
    line="-A INPUT -m tcp -p tcp --dport {{ httpd_port }} -j ACCEPT"
    insertbefore="^-A INPUT.*REJECT"
    state=present
  when: firewall.stdout | search("INPUT")

- name: setup,os_settings | reload iptables
  service: name=iptables state=reloaded
  when: firewall.stdout | search("INPUT") and iptables_state.rc != 0


# ---- Lxr_user settings ----

- name: setup,os_settings | setup the user for lxr
  user: name="{{ lxr_user }}" state=present

- name: setup,os_settings | register ssh public key to lxr_user
  authorized_key: user="{{ lxr_user }}" key="{{ lxr_user_login_pubkey }}"

